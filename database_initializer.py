"""
Script principal de inicializaci√≥n de base de datos para producci√≥n.
Este script configura autom√°ticamente toda la estructura de base de datos
necesaria para el API Dashboard de la Alcald√≠a de Cali.
"""

import logging
import sys
import os
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.exc import OperationalError, ProgrammingError
from typing import Dict, List, Tuple
import time

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from fastapi_project.database import SQLALCHEMY_DATABASE_URL, engine
from fastapi_project import models

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('database_init.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DatabaseInitializer:
    """Inicializa y verifica la estructura de la base de datos para el API.

    Responsabilidades:
    - Verificar conexi√≥n
    - Crear tablas e √≠ndices si faltan (tipos correctos)
    - Corregir discrepancias de esquema t√≠picas
    - Validar que el esquema final cumpla las expectativas

    Notas: No migra datos complejos; se centra en estructura e √≠ndices.
    """
    
    def __init__(self):
        self.engine = engine
        self.inspector = inspect(self.engine)
        
    def check_database_connection(self) -> bool:
        """Verifica la conexi√≥n a la base de datos mediante un SELECT 1."""
        try:
            with self.engine.connect() as connection:
                connection.execute(text("SELECT 1"))
            logger.info("‚úÖ Conexi√≥n a la base de datos exitosa")
            return True
        except OperationalError as e:
            logger.error(f"‚ùå Error de conexi√≥n a la base de datos: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Error inesperado de conexi√≥n: {e}")
            return False
    
    def get_existing_tables(self) -> List[str]:
        """Obtiene la lista de tablas existentes en la base de datos."""
        try:
            tables = self.inspector.get_table_names()
            logger.info(f"üìä Tablas existentes encontradas: {len(tables)}")
            return tables
        except Exception as e:
            logger.error(f"‚ùå Error al obtener tablas existentes: {e}")
            return []
    
    def backup_existing_data(self, tables: List[str]) -> Dict[str, int]:
        """Cuenta registros por tabla importante para fines de backup r√°pido (metadatos)."""
        backup_counts = {}
        important_tables = [
            'centros_gestores', 'programas', 'areas_funcionales', 
            'propositos', 'retos', 'movimientos_presupuestales', 
            'ejecucion_presupuestal', 'unidades_proyecto_infraestructura_equipamientos',
            'unidades_proyecto_infraestructura_vial', 'seguimiento_pa',
            'seguimiento_productos_pa', 'seguimiento_actividades_pa'
        ]
        
        try:
            with self.engine.connect() as connection:
                for table in important_tables:
                    if table in tables:
                        result = connection.execute(text(f"SELECT COUNT(*) FROM {table}"))
                        count = result.scalar()
                        backup_counts[table] = count
                        logger.info(f"üìã {table}: {count} registros existentes")
        except Exception as e:
            logger.error(f"‚ùå Error al hacer backup de datos: {e}")
        
        return backup_counts
    
    def create_tables_with_correct_schema(self):
        """Crea/verifica tablas usando SQLAlchemy modelos (incluye todas las tablas definidas)."""
        logger.info("üîß Creando estructura de tablas desde modelos SQLAlchemy...")
        
        try:
            # Usar SQLAlchemy para crear todas las tablas definidas en models.py
            models.Base.metadata.create_all(bind=self.engine)
            logger.info("‚úÖ Todas las tablas creadas/verificadas desde modelos SQLAlchemy")
            
            # Listar las tablas creadas
            created_tables = self.get_existing_tables()
            logger.info(f"üìä Tablas disponibles ({len(created_tables)}):")
            for table in sorted(created_tables):
                logger.info(f"   ‚Ä¢ {table}")
                
        except Exception as e:
            logger.error(f"‚ùå Error al crear tablas desde modelos: {e}")
            raise
            
            # Crear √≠ndices importantes para rendimiento
            self.create_performance_indexes()
                    
        except Exception as e:
            logger.error(f"‚ùå Error al crear tablas: {e}")
            raise
    
    def create_performance_indexes(self):
        """Crea √≠ndices importantes para mejorar el rendimiento de consultas."""
        logger.info("üîß Creando √≠ndices de rendimiento...")
        
        indices = [
            # √çndices para movimientos presupuestales
            "CREATE INDEX IF NOT EXISTS idx_movimientos_bpin ON movimientos_presupuestales(bpin)",
            "CREATE INDEX IF NOT EXISTS idx_movimientos_periodo ON movimientos_presupuestales(periodo_corte)",
            
            # √çndices para ejecuci√≥n presupuestal
            "CREATE INDEX IF NOT EXISTS idx_ejecucion_bpin ON ejecucion_presupuestal(bpin)",
            "CREATE INDEX IF NOT EXISTS idx_ejecucion_periodo ON ejecucion_presupuestal(periodo_corte)",
            
            # √çndices para equipamientos
            "CREATE INDEX IF NOT EXISTS idx_equipamientos_identificador ON unidades_proyecto_infraestructura_equipamientos(identificador)",
            "CREATE INDEX IF NOT EXISTS idx_equipamientos_comuna ON unidades_proyecto_infraestructura_equipamientos(comuna_corregimiento)",
            "CREATE INDEX IF NOT EXISTS idx_equipamientos_estado ON unidades_proyecto_infraestructura_equipamientos(estado_unidad_proyecto)",
            
            # √çndices para infraestructura vial
            "CREATE INDEX IF NOT EXISTS idx_vial_identificador ON unidades_proyecto_infraestructura_vial(identificador)",
            "CREATE INDEX IF NOT EXISTS idx_vial_comuna ON unidades_proyecto_infraestructura_vial(comuna_corregimiento)",
            "CREATE INDEX IF NOT EXISTS idx_vial_estado ON unidades_proyecto_infraestructura_vial(estado_unidad_proyecto)",
            
            # √çndices para seguimiento PA
            "CREATE INDEX IF NOT EXISTS idx_seguimiento_pa_periodo ON seguimiento_pa(periodo_corte)",
            "CREATE INDEX IF NOT EXISTS idx_seguimiento_pa_subdireccion ON seguimiento_pa(subdireccion_subsecretaria)",
            "CREATE INDEX IF NOT EXISTS idx_seguimiento_productos_pa_cod1 ON seguimiento_productos_pa(cod_pd_lvl_1)",
            "CREATE INDEX IF NOT EXISTS idx_seguimiento_productos_pa_cod2 ON seguimiento_productos_pa(cod_pd_lvl_2)",
            "CREATE INDEX IF NOT EXISTS idx_seguimiento_actividades_pa_cod1 ON seguimiento_actividades_pa(cod_pd_lvl_1)",
            "CREATE INDEX IF NOT EXISTS idx_seguimiento_actividades_pa_cod2 ON seguimiento_actividades_pa(cod_pd_lvl_2)",
            "CREATE INDEX IF NOT EXISTS idx_seguimiento_actividades_pa_cod3 ON seguimiento_actividades_pa(cod_pd_lvl_3)"
        ]
        
        try:
            with self.engine.connect() as connection:
                with connection.begin():
                    for index_sql in indices:
                        try:
                            connection.execute(text(index_sql))
                            logger.info(f"‚úÖ √çndice creado: {index_sql.split('idx_')[1].split(' ')[0]}")
                        except Exception as e:
                            if "already exists" in str(e):
                                logger.info(f"‚ö†Ô∏è √çndice ya existe: {index_sql.split('idx_')[1].split(' ')[0]}")
                            else:
                                logger.warning(f"‚ö†Ô∏è Error creando √≠ndice: {e}")
                    
                    logger.info("‚úÖ Todos los √≠ndices procesados")
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error durante creaci√≥n de √≠ndices: {e}")
    
    def fix_existing_schema_issues(self):
        """Corrige problemas comunes de tipos de columnas en tablas existentes."""
        logger.info("üîÑ Verificando y corrigiendo esquemas existentes...")
        
        schema_fixes = [
            # Corregir tipos de columnas texto
            {
                'table': 'centros_gestores',
                'column': 'nombre_centro_gestor',
                'fix': "ALTER TABLE centros_gestores ALTER COLUMN nombre_centro_gestor TYPE TEXT"
            },
            {
                'table': 'programas',
                'column': 'nombre_programa', 
                'fix': "ALTER TABLE programas ALTER COLUMN nombre_programa TYPE TEXT"
            },
            {
                'table': 'areas_funcionales',
                'column': 'nombre_area_funcional',
                'fix': "ALTER TABLE areas_funcionales ALTER COLUMN nombre_area_funcional TYPE TEXT"
            },
            {
                'table': 'propositos',
                'column': 'nombre_proposito',
                'fix': "ALTER TABLE propositos ALTER COLUMN nombre_proposito TYPE TEXT"
            },
            {
                'table': 'retos',
                'column': 'nombre_reto',
                'fix': "ALTER TABLE retos ALTER COLUMN nombre_reto TYPE TEXT"
            },
            # Corregir tipos para movimientos y ejecuci√≥n
            {
                'table': 'movimientos_presupuestales',
                'column': 'bpin',
                'fix': "ALTER TABLE movimientos_presupuestales ALTER COLUMN bpin TYPE BIGINT"
            },
            {
                'table': 'movimientos_presupuestales',
                'column': 'periodo_corte',
                'fix': "ALTER TABLE movimientos_presupuestales ALTER COLUMN periodo_corte TYPE VARCHAR(50) USING periodo_corte::VARCHAR(50)"
            },
            {
                'table': 'ejecucion_presupuestal',
                'column': 'bpin',
                'fix': "ALTER TABLE ejecucion_presupuestal ALTER COLUMN bpin TYPE BIGINT"
            },
            {
                'table': 'ejecucion_presupuestal',
                'column': 'periodo_corte',
                'fix': "ALTER TABLE ejecucion_presupuestal ALTER COLUMN periodo_corte TYPE VARCHAR(50) USING periodo_corte::VARCHAR(50)"
            },
            # Corregir tipos para unidades de proyecto vial
            {
                'table': 'unidades_proyecto_infraestructura_vial',
                'column': 'identificador',
                'fix': "ALTER TABLE unidades_proyecto_infraestructura_vial ALTER COLUMN identificador TYPE VARCHAR(255) USING identificador::VARCHAR(255)"
            }
        ]
        
        try:
            with self.engine.connect() as connection:
                for fix in schema_fixes:
                    try:
                        logger.info(f"üîß Corrigiendo {fix['table']}.{fix['column']}")
                        with connection.begin():
                            connection.execute(text(fix['fix']))
                        logger.info(f"‚úÖ {fix['table']}.{fix['column']} corregido")
                    except ProgrammingError as e:
                        if "already exists" in str(e) or "does not exist" in str(e):
                            logger.info(f"‚ö†Ô∏è {fix['table']}.{fix['column']} ya est√° correcto o no existe")
                        else:
                            logger.warning(f"‚ö†Ô∏è No se pudo corregir {fix['table']}.{fix['column']}: {e}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Error menor corrigiendo {fix['table']}.{fix['column']}: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå Error durante correcci√≥n de esquemas: {e}")
    
    def verify_final_schema(self) -> bool:
        """Verifica que el esquema final est√© correcto consultando information_schema."""
        logger.info("üîç Verificando esquema final...")
        
        expected_tables = [
            'centros_gestores', 'programas', 'areas_funcionales',
            'propositos', 'retos', 'movimientos_presupuestales', 
            'ejecucion_presupuestal', 'unidades_proyecto_infraestructura_equipamientos',
            'unidades_proyecto_infraestructura_vial', 'seguimiento_pa',
            'seguimiento_productos_pa', 'seguimiento_actividades_pa'
        ]
        
        try:
            with self.engine.connect() as connection:
                # Verificar que todas las tablas existen
                existing_tables = self.get_existing_tables()
                missing_tables = [t for t in expected_tables if t not in existing_tables]
                
                if missing_tables:
                    logger.error(f"‚ùå Tablas faltantes: {missing_tables}")
                    return False
                
                # Verificar tipos de columnas cr√≠ticas
                schema_check = text("""
                    SELECT table_name, column_name, data_type, character_maximum_length
                    FROM information_schema.columns 
                    WHERE table_schema = 'public' 
                    AND table_name IN ('movimientos_presupuestales', 'ejecucion_presupuestal', 
                                     'unidades_proyecto_infraestructura_equipamientos',
                                     'unidades_proyecto_infraestructura_vial',
                                     'seguimiento_pa', 'seguimiento_productos_pa', 
                                     'seguimiento_actividades_pa')
                    AND column_name IN ('bpin', 'periodo_corte', 'identificador', 'id_seguimiento_pa',
                                      'cod_pd_lvl_1', 'cod_pd_lvl_2', 'cod_pd_lvl_3')
                    ORDER BY table_name, column_name;
                """)
                
                result = connection.execute(schema_check)
                schema_ok = True
                
                for row in result:
                    table_name, column_name, data_type, max_length = row
                    logger.info(f"üìä {table_name}.{column_name}: {data_type} ({max_length})")
                    
                    if column_name == 'bpin' and data_type != 'bigint':
                        logger.error(f"‚ùå {table_name}.bpin deber√≠a ser bigint, es {data_type}")
                        schema_ok = False
                    elif column_name == 'periodo_corte' and data_type != 'character varying':
                        logger.error(f"‚ùå {table_name}.periodo_corte deber√≠a ser varchar, es {data_type}")
                        schema_ok = False
                    elif column_name == 'identificador' and data_type != 'character varying':
                        logger.error(f"‚ùå {table_name}.identificador deber√≠a ser varchar, es {data_type}")
                        schema_ok = False
                
                if schema_ok:
                    logger.info("‚úÖ Esquema verificado correctamente")
                    return True
                else:
                    logger.error("‚ùå Problemas encontrados en el esquema")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error durante verificaci√≥n de esquema: {e}")
            return False
    
    def initialize_database(self) -> bool:
        """Orquesta el flujo completo de inicializaci√≥n y verificaci√≥n de la base de datos."""
        logger.info("üöÄ Iniciando inicializaci√≥n completa de la base de datos")
        logger.info("=" * 60)
        
        try:
            # 1. Verificar conexi√≥n
            if not self.check_database_connection():
                return False
            
            # 2. Obtener estado actual
            existing_tables = self.get_existing_tables()
            backup_data = self.backup_existing_data(existing_tables)
            
            # 3. Crear/verificar estructura de tablas
            self.create_tables_with_correct_schema()
            
            # 4. Corregir problemas de esquema existentes
            self.fix_existing_schema_issues()
            
            # 5. Verificar esquema final
            if not self.verify_final_schema():
                logger.error("‚ùå La verificaci√≥n final del esquema fall√≥")
                return False
            
            # 6. Reporte final
            logger.info("=" * 60)
            logger.info("üéâ INICIALIZACI√ìN COMPLETADA EXITOSAMENTE")
            logger.info("üìä Resumen:")
            logger.info(f"   ‚Ä¢ Tablas verificadas/creadas: {len(existing_tables)}")
            logger.info(f"   ‚Ä¢ Datos existentes preservados: {sum(backup_data.values())} registros")
            logger.info("   ‚Ä¢ Esquema optimizado para producci√≥n")
            logger.info("   ‚Ä¢ √çndices creados para rendimiento")
            logger.info("=" * 60)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error durante la inicializaci√≥n: {e}")
            return False

def main():
    """Funci√≥n principal para ejecutar la inicializaci√≥n"""
    print("üèõÔ∏è API Dashboard Alcald√≠a de Cali - Inicializador de Base de Datos")
    print("=" * 60)
    
    initializer = DatabaseInitializer()
    
    start_time = time.time()
    success = initializer.initialize_database()
    end_time = time.time()
    
    print(f"\n‚è±Ô∏è Tiempo total: {end_time - start_time:.2f} segundos")
    
    if success:
        print("‚úÖ Base de datos lista para producci√≥n")
        sys.exit(0)
    else:
        print("‚ùå Error en la inicializaci√≥n. Revisar logs para detalles.")
        sys.exit(1)

if __name__ == "__main__":
    main()
